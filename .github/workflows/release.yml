name: Release Application

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-2022, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Windows
      if: matrix.os == 'windows-2022'
      run: npm run dist-win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      run: npm run dist-linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: dist/*

  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set release version
      run: echo "VERSION=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Rename and prepare executables
      run: |
        for file in ./artifacts/*/*; do
          if [ -f "$file" ]; then
            os_name=$(basename $(dirname "$file"))
            filename=$(basename "$file")
            dir=$(dirname "$file")
            
            case "$os_name" in
              windows-2022)
                if [[ "$file" == *.exe ]]; then
                  # Create user-friendly name
                  cp "$file" "$dir/Documente-Windows.exe"
                  # Create electron-updater compatible name
                  mv "$file" "$dir/generator-documente-minoritati-${VERSION#v}.exe"
                fi
                ;;
              ubuntu-latest)
                if [[ "$file" == *.AppImage ]]; then
                  # Create user-friendly name  
                  cp "$file" "$dir/Documente-Linux.AppImage"
                  # Create electron-updater compatible name
                  mv "$file" "$dir/generator-documente-minoritati-${VERSION#v}.AppImage"
                fi
                ;;
            esac
          fi
        done

    - name: Generate update metadata
      run: |
        # Create latest.yml for electron-updater (Windows)
        cat > ./artifacts/latest.yml << EOF
        version: ${VERSION#v}
        files:
          - url: generator-documente-minoritati-${VERSION#v}.exe
            sha512: $(sha512sum ./artifacts/*/generator-documente-minoritati-${VERSION#v}.exe 2>/dev/null | cut -d' ' -f1 || echo "")
            size: $(stat -c%s ./artifacts/*/generator-documente-minoritati-${VERSION#v}.exe 2>/dev/null || echo "0")
        path: generator-documente-minoritati-${VERSION#v}.exe
        sha512: $(sha512sum ./artifacts/*/generator-documente-minoritati-${VERSION#v}.exe 2>/dev/null | cut -d' ' -f1 || echo "")
        releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        EOF
        
        # Create latest-linux.yml for electron-updater (Linux)
        cat > ./artifacts/latest-linux.yml << EOF
        version: ${VERSION#v}
        files:
          - url: generator-documente-minoritati-${VERSION#v}.AppImage
            sha512: $(sha512sum ./artifacts/*/generator-documente-minoritati-${VERSION#v}.AppImage 2>/dev/null | cut -d' ' -f1 || echo "")
            size: $(stat -c%s ./artifacts/*/generator-documente-minoritati-${VERSION#v}.AppImage 2>/dev/null || echo "0")
        path: generator-documente-minoritati-${VERSION#v}.AppImage
        sha512: $(sha512sum ./artifacts/*/generator-documente-minoritati-${VERSION#v}.AppImage 2>/dev/null | cut -d' ' -f1 || echo "")
        releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: "üèõÔ∏è Generator Documente Minoritati ${{ env.VERSION }}"
        body: |
          ## üéØ Generator Documente Minoritati ${{ env.VERSION }}
          
          üìã Desktop application for generating minority documents
          
          ### üì¶ Downloads
          
          **For regular users:**
          - **Windows**: Download `Documente-Windows.exe`
          - **Linux**: Download `Documente-Linux.AppImage`
          
          **For auto-updater (technical files):**
          - Windows: `generator-documente-minoritati-1.0.6.exe`
          - Linux: `generator-documente-minoritati-1.0.6.AppImage`
          - Metadata: `latest.yml`, `latest-linux.yml`
          
          ### ‚ú® Features
          - Generate decision documents
          - Generate minority reports
          - Document preview functionality
          - Professional document formatting
          
          ---
          üõ†Ô∏è Built with Electron and Node.js
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release assets (skip directories)
      run: |
        # Upload metadata files first
        if [ -f "./artifacts/latest.yml" ]; then
          echo "Uploading latest.yml..."
          gh release upload "${VERSION}" "./artifacts/latest.yml" --clobber
        fi
        
        if [ -f "./artifacts/latest-linux.yml" ]; then
          echo "Uploading latest-linux.yml..."
          gh release upload "${VERSION}" "./artifacts/latest-linux.yml" --clobber
        fi
        
        # Upload executable files
        for file in ./artifacts/*/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file..."
            gh release upload "${VERSION}" "$file" --clobber
          else
            echo "Skipping directory $file"
          fi
        done
